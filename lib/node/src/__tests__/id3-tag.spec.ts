import { UnknownFrame } from "../unknown-frame";
import { ID3Tag } from "../id3-tag";
import { getSynch, toSynch } from "../utils";

test("USyncSafeInt32BE -> UInt32BE", () => {
  const syncSafeInt = 410667;
  const parsed = getSynch(syncSafeInt);
  expect(parsed).toEqual(107051);
});

test("UInt32BE -> USyncSafeInt32BE", () => {
  const int = 107051;
  // const int = 203 - 10;
  const syncSafeInt = toSynch(int);
  expect(syncSafeInt).toEqual(410667);
});

test("parses ID3 tag", () => {
  const buffer = Buffer.from([
    0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x54, 0x49,
    0x54, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x44, 0x72, 0x65,
    0x61, 0x6d, 0x65, 0x72, 0x54, 0x50, 0x45, 0x31, 0x00, 0x00, 0x00, 0x09,
    0x00, 0x00, 0x00, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x54,
    0x41, 0x4c, 0x42, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x44, 0x72,
    0x65, 0x61, 0x6d, 0x65, 0x72, 0x54, 0x43, 0x4f, 0x4e, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x2f,
    0x44, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x54, 0x50, 0x55, 0x42, 0x00, 0x00,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
    0x65, 0x54, 0x59, 0x45, 0x52, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x32, 0x30, 0x32, 0x30, 0x54, 0x4b, 0x45, 0x59, 0x00, 0x00, 0x00, 0x04,
    0x00, 0x00, 0x00, 0x45, 0x62, 0x6d, 0x54, 0x58, 0x58, 0x58, 0x00, 0x00,
    0x00, 0x15, 0x00, 0x00, 0x00, 0x53, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x5f,
    0x50, 0x4c, 0x41, 0x59, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x31, 0x31,
    0x00, 0x52, 0x56, 0x41, 0x44, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x42, 0x50,
    0x4d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x37, 0x34,
  ]);

  const id3Tag = new ID3Tag(buffer);
  // Header
  expect(id3Tag.id3TagSize).toEqual(203);
  expect(id3Tag.version.minor).toEqual(3);
  expect(id3Tag.version.patch).toEqual(0);
  expect(id3Tag.size).toEqual(193);
  expect(id3Tag.flags.value).toEqual(0);
  expect(id3Tag.flags.experimentalIndicator).toEqual(false);
  expect(id3Tag.flags.hasExtendedHeader).toEqual(false);
  expect(id3Tag.flags.hasFooter).toEqual(false);
  expect(id3Tag.flags.unsynchronisation).toEqual(false);

  // Frames
  expect(id3Tag.frames.length).toEqual(10);

  // TIT2
  const tit2Frame = id3Tag.frames.find(
    (frame) => frame.type === "TIT2"
  ) as UnknownFrame;
  expect(tit2Frame?.frameOffset).toEqual(10);
  expect(tit2Frame?.size).toEqual(8);
  expect(tit2Frame?.flags).toEqual(0);
  expect(tit2Frame?.body).toEqual(
    Buffer.from([0x00, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72])
  );

  // TPE1
  const tpe1Frame = id3Tag.frames.find(
    (frame) => frame.type === "TPE1"
  ) as UnknownFrame;
  expect(tpe1Frame?.frameOffset).toEqual(28);
  expect(tpe1Frame?.size).toEqual(9);
  expect(tpe1Frame?.flags).toEqual(0);
  expect(tpe1Frame?.body).toEqual(
    Buffer.from([0x00, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65])
  );
});
